Repton levels appear to be maps of 32 row by 32 columns.

The level data was found by loading the REPTON2 file into memory in MODE 5
and visually inspecting the data. The assumption was that level data follows
the sprite data.

Level data seems to start at 0x2c00.

Setting the lowest 4 bits of the first byte in the first level to 0 results
in a blank cell; setting it to 1 results in a diamond.

Setting the highest 4 bits of the first byte to 0 produces something other
than a blank space.

Setting multiple bytes to 0 results in a group of blank cells followed by
a teleporter-style cell - the type of cell used for teleporters in Repton 2.

Each row of the level appears to be 20 bytes long. This may mean that each
cell is stored in 5 bits.


After some experimentation and reading of levels, this is the mapping between
values and cell types:

     0: space
     1: diamond
     2: boulder
     3: egg
     4: key
     5: earth
     6: earth
     7: earth
     8: safe
     9: brick wall
    10: double (top/bottom) wall
    11: double (left/right) wall
    12: quadruple wall
    13: fancy wall
    14: smooth wall
    15: lower edged smooth wall
    16: upper edged smooth wall
    17: right edged smooth wall
    18: left edged smooth wall
    19: lower right curved smooth wall
    20: lower left curved smooth wall
    21: upper right curved smooth wall
    22: upper left curved smooth wall
    23: map
    24: lower edged brick wall
    25: upper edged brick wall
    26: right edged brick wall
    27: left edged brick wall
    28: lower right curved brick wall
    29: lower left curved brick wall
    30: upper right curved brick wall
    31: upper left curved brick wall

Sprites are stored at 0x2500 in the REPTON2 file and are 8 by 16 pixels. See
the table in the sprites module of the Repton package for the offsets into the
sprite data.


Repton 2 levels appear to start at 0x2e00 and encode the data in rows of 20
bytes (5 bits per cell again).

Because the top row of Screen A is a single wall with two openings at the ends,
it is clear to see that values of 0x1f (31) are solid wall pieces and that
blank cells are 0x00 (0).

The top of Screen B appears to start at 0x2fe0. Screen A is only 24 rows high.
Many other screens are 32 rows high.

Screen C is 24 rows high.


Sprites appear to start at 0x2340.

Spirits are 4 by 8 pixels.
Other sprites are 12 by 24 pixels.

Text characters start at 0x2040.
Code appears to end at 0x1aff.

Writing zero bytes into the file from 0x2001 to 0x203f results in a corrupted
Screen A and a topmost transporter that sends Repton to the leftmost skull
chamber with the palette for the level that should have been entered. This
means that the palette data is probably stored separately.

The first two bytes (0x2000, 0x2001) seem to control the displacement of the
Screen A data. The following bytes seem to control transporter destinations.

Byte 0x2028 appears to control the destination of the topmost transporter.
Byte 0x202c appears to control the transporter one square down and to the left
of it.
Byte 0x2004 appears to control the transporter to Screen B (below the first
boulder trap on the right of Screen A).

Bytes 0x2004 and 0x2005 control different aspects of the transportation. It
seems like the first byte controls what is copied into the top eight rows of
the level buffer, and the second byte controls some of the rows beneath.

It appears that each set of four bytes, from 0x2000 to 0x203f, contain four
indices into the level data which each refer to eight rows of level data.
The special index, 0x80, is the empty space at the bottom of Screen A.

By inspecting the 64 bytes of level data and comparing them to the maps on the
Stairway to Hell site, values of 0x80 and above appear to be placeholders for
eight rows that contain a single type of tile. So, 0x80 is eight rows of empty
space, 0x86 must be diamonds (as used in Screen P), and 0x83 has been tested to
be earth.
