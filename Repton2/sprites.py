#!/usr/bin/env python

"""
sprites.py - A module for exporting raw sprite data from Repton.

Copyright (C) 2013 David Boddie <david@boddie.org.uk>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import os, sys

# Offsets into the sprite data for the top-left, top-right, bottom-left and
# bottom-right 8 byte pieces of each sprite. For the blank piece, I just chose
# a blank area in the file data.

sprite_table = [
    (0x300, 0x300, 0x300,   # space
     0x300, 0x300, 0x300,
     0x300, 0x300, 0x300),
    (0x300, 0x300, 0x300,   # space
     0x300, 0x300, 0x300,
     0x300, 0x300, 0x300),
    (0x200, 0x238, 0x208,   # transporter/puzzle piece
     0x220, 0x1f8, 0x228,
     0x210, 0x230, 0x218),
    (0x118, 0x120, 0x110,   # earth (cross)
     0x128, 0x140, 0x128,
     0x118, 0x120, 0x110),
    (0x108, 0x120, 0x110,   # earth (top-right, bottom-left)
     0x128, 0x130, 0x128,
     0x118, 0x120, 0x108),
    (0x108, 0x120, 0x118,   # earth (bottom-right, top-left)
     0x128, 0x138, 0x128,
     0x118, 0x120, 0x110),
    (0x148, 0x150, 0x158,   # diamond
     0x160, 0x168, 0x170,
     0x178, 0x180, 0x300),
    (0x308, 0x310, 0x318,   # key
     0x5b8, 0x478, 0x6f8,
     0x320, 0x328, 0x330),
    (0x460, 0x468, 0x470,   # skull
     0x5a0, 0x5a8, 0x5b0,
     0x6e0, 0x6e8, 0x6f0),
    (0x308, 0x188, 0x318,   # finishing piece/spirit
     0x188, 0x478, 0x188,
     0x320, 0x188, 0x330),
    (0x300, 0x300, 0x300,   # status piece
     0x300, 0x338, 0x300,
     0x300, 0x300, 0x300),
    (0x300, 0x300, 0x300,   # unknown
     0x300, 0x300, 0x300,
     0x300, 0x300, 0x300),
    (0x190, 0x190, 0x198,   # cage
     0x190, 0x190, 0x1a0,
     0x190, 0x190, 0x198),
    (0x1a8, 0x1b0, 0x1b8,   # safe
     0x1c0, 0x1c8, 0x1d0,
     0x1d8, 0x1e0, 0x1e8),
    (0x418, 0x420, 0x428,   # boulder
     0x558, 0x560, 0x568,
     0x698, 0x6a0, 0x6a8),
    (0x430, 0x438, 0x440,   # egg
     0x570, 0x578, 0x580,
     0x6b0, 0x6b8, 0x6c0),
    (0x070, 0x090, 0x048,   # upper right curved brick wall
     0x030, 0x030, 0x068,
     0x038, 0x030, 0x088),
    (0x040, 0x070, 0x090,   # upper left curved brick wall
     0x060, 0x030, 0x038,
     0x080, 0x030, 0x030),
    (0x060, 0x038, 0x030,   # lower left curved brick wall
     0x080, 0x038, 0x030,
     0x050, 0x078, 0x098),
    (0x030, 0x038, 0x068,   # lower right curved brick wall
     0x038, 0x038, 0x088,
     0x098, 0x078, 0x058),
    (0x060, 0x038, 0x030,   # left brick wall
     0x060, 0x030, 0x038,
     0x080, 0x030, 0x038),
    (0x028, 0x030, 0x068,   # right brick wall
     0x030, 0x038, 0x088,
     0x028, 0x030, 0x068),
    (0x070, 0x070, 0x090,   # upper brick wall
     0x028, 0x030, 0x038,
     0x028, 0x038, 0x030),
    (0x028, 0x038, 0x030,   # lower brick wall
     0x028, 0x030, 0x038,
     0x098, 0x078, 0x098),
    (0x028, 0x030, 0x038,   # brick wall
     0x028, 0x030, 0x038,
     0x028, 0x030, 0x038),
    (0x240, 0x248, 0x250,   # quadruple decorative wall
     0x258, 0x260, 0x268,
     0x270, 0x278, 0x280),
    (0x0d0, 0x0c8, 0x0c8,   # upper left curved smooth wall
     0x0c8, 0x0c8, 0x0c8,
     0x0c8, 0x0c8, 0x0c8),
    (0x0c8, 0x0c8, 0x0d8,   # upper right curved smooth wall
     0x0c8, 0x0c8, 0x0c8,
     0x0c8, 0x0c8, 0x0c8),
    (0x0c8, 0x0c8, 0x0c8,   # lower left curved smooth wall
     0x0c8, 0x0c8, 0x0c8,
     0x0e0, 0x0c8, 0x0c8),
    (0x0c8, 0x0c8, 0x0c8,   # lower right curved smooth wall
     0x0c8, 0x0c8, 0x0c8,
     0x0c8, 0x0c8, 0x0e8),
    (0x0c8, 0x0c8, 0x0c8,   # smooth wall
     0x0c8, 0x0c8, 0x0c8,
     0x0c8, 0x0c8, 0x0c8),
    (0x0a0, 0x0a8, 0x0b0,   # planet surface
     0x028, 0x030, 0x038,
     0x028, 0x030, 0x038)
    ]

class Reader:

    def __init__(self, data):
    
        self.data = data
    
    def read_sprite(self, offset):
    
        rows = []
        
        for i in range(8):
        
            byte = self.data[offset + i]
            rows.append(self.read_columns(byte))
        
        return rows
    
    def read_columns(self, byte):
    
        columns = []
        byte = ord(byte)
        for i in range(4):
        
            v = (byte & 0x01) | ((byte & 0x10) >> 3)
            byte = byte >> 1
            columns.append(v)
        
        columns.reverse()
        return "".join(map(chr, columns))
